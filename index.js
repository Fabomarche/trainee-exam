const nums = [1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,590,123124,1,2,3,4,5,6,7,8,9,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,590,123124,1,2,3,4,5,6,7,8,9,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,590,123124,1,2,3,4,5,6,7,8,9,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,590,123124,1,2,3,4,5,6,7,8,9,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,590,123124,1,2,3,4,5,6,7,8,9,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,1,2,4,7,4,3,4,5,6,7,8,9,0,4,45,6,53,3,2,3,34,590,123124,1,2,3,4,5,6,7,8,9]
const requiredSum = 28


const isRequiredSum = (nums, requiredSum) => {
    for(let i=0; i < nums.length; i++){
        for(let j = i + 1; j < nums.length; j++){
            if(nums[i] + nums[j] === requiredSum) return true
        }
    }
    return false
}

console.time("isRequiredSum")
isRequiredSum(nums, requiredSum)
console.timeEnd("isRequiredSum")

const isRequiredSumMap = (nums, requiredSum) => {
    let found = false;

    nums.map((num1, index1) => {
        nums.slice(index1 + 1).map((num2) => {
            if (num1 + num2 === requiredSum) {
                found = true;
            }
        });
    });

    return found;
};

console.time("isRequiredSumMap")
isRequiredSum(nums, requiredSum)
console.timeEnd("isRequiredSumMap")


const isSumOptimized = (nums, requiredSum) => {
    const memory = new Set();

    for (const num of nums) {
        if (memory.has(requiredSum - num)) {
            return true;
        }

        memory.add(num);
    }

    return false;
};

console.time("isSumOptimized")
isSumOptimized(nums, requiredSum)
console.timeEnd("isSumOptimized")